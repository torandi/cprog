/////////////////////////////////////////////////////////////////
//
// Personuppgifter (namn, pnr, epost) på dem som gjort labben
//
Andreas Tarandi, 890416-0317, taran@kth.se
Mattias Mikkola, 880703-0237, mmikkola@kth.se



/////////////////////////////////////////////////////////////////
//
// 1.2 a)
//
// Vilket värde får variabeln w?
w får värdet 28. (print w ger "$2 = 28" i gdb).

// Hur många varv körs for-loopen i funktionen powerof?
Den kör y varv. Men den gör ingenting förutom att inkrementera i p.g.a. semikolonet efter for-loop-deklarationen.

// Varför blir det fel värde?
Rounding errors. z är 0.289999992, och z * x * x blir 28.999999165534973. När det castas om till en int så slängs decimaldelen bort och vi får kvar 28.
// 1.2 b)

// Dina tre testfall

Testa att den räknar med absolut sista också
char vek[] ={'a','a','a','b'};
int result = must_follow_a(vek,4,'a','b');
TS_ASSERT_EQUALS(result,1);

Testa att den inte förvirrar första med att vara efter ett a
char vek[] ={'b','a','a','a'};
int result = must_follow_a(vek,4,'a','b');
TS_ASSERT_EQUALS(result,0);

Testa att den bara räknar rätt tecken
char vek[] ={'a','b','c','b','a','g'};
int result = must_follow_a(vek,6,'a','b');
TS_ASSERT_EQUALS(result,1);

// Varför är det så viktigt att testa randvillkoren?
Det är oftast vid randerna som "off by one"-fel visar sig


/////////////////////////////////////////////////////////////////
//
// 1.3
//

// Fyll i egen text i de streckade strängarna nedanför. Vad skriver
// ditt program ut? Varför? När frigörs objekten?  När skapas
// temporära objekt?
Se kod för strängarna.

Det som skrivs ut är:
    A a((char *)"My name is A"); // A(My name is A), eftersom vi kallar på konstruktorn med ett argument av typen char *.
    A b = a; // A(0x7fff5fbff1cf), när vi skapar ett nytt objekt såhär så kommer kopieringskonstruktorn köras.
    A c(a); // A(0x7fff5fbff1cf), Vi kör kopieringskonstruktorn.
    A d; // A(), default-konstruktorn körs när vi skapar ett nytt objekt.
    d = a; // operator=(0x7fff5fbff1cf), tilldelningsoperatorn körs här eftersom vi tilldelar ett redan instansierat onbjekt till ett annat.

    A *aa = new A[5]; // 5xA(), varje A-objekt i arrayen körs default-konstruktor på.
    delete[] aa; // 5x~A(), dekonstruktorn körs på samtliga objekt i arrayen.

    no_ref(a); // A(0x7fff5fbff1cf), eftersom det kommer skapas ett temporärt objekt som är en kopia av a.
    with_ref(a); // Ger ingen utskrift.

    return 0; // 5x~A(), a,b,c,d och det temporära objektet i no_ref dekonstrueras, då de går out of scope.

//   A b = a;         // vad är skillnaden
//   A c(a);          // mellan dessa
//   A d;             // tre tekniker?
A b = a; och A c(a) kommer båda köra copy-konstruktorn, men A b = a; fungerar ej om man har explicit konstruktor. A d; kommer alltid köra default-konstruktorn.

//   delete aa;       // Vad kommer att hända
Undefined behaviour. Förmodligen kompileringsfel.

//   no_ref(a);       // Bildas temporära objekt?
Ja, då a inte är en referens kommer det skapas ett nytt objekt, vilket vi såg nör vi körde den då den kallade på copy-konstruktorn.
//   with_ref(a);     // Bildas temporära objekt?
Nej, eftersom a är en referens kommer det inte ske.



/////////////////////////////////////////////////////////////////
//
// 1.4
//
// Generellt är det ofta en god idé att låta konstruktorer som
// tar ett argument deklareras som explicit. Varför? Ange ett
// exempel där det annars kan bli dumt.
För att slippa saker som Vector v = 123; Kompilatorn kommer göra en implicit konvertering till Vector v(size_t size); Och om vi har en funktion foo(const Vector& v) kommer vi kunna köra foo(123) t.ex. Det är då väldigt otydligt vad koden gör.

// operatorn[] måste vara en konstant medlemsfunktion i vissa
// fall. När och varför? Hur kopierar man vektorn?
Själva operator[]-funktionen ska inte ändra på något i klassen. Däremot ska det vara möjligt att ändra på det returnerade resultatet. Kopiering av vektorn bör göras genom att copy-construktorn körs på alla objekt i vektorn (så att de kopieras korrekt).

